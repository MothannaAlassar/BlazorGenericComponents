#pragma checksum "E:\SharedApps\GitHub\BlazorGenericComponents\Components\BaseBasicGenericCertComponent.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "93de16f32be5a315883889258c1237f7838e4588"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorGenericComponents.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using BlazorGenericComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using BlazorGenericComponents.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using BlazorGenericComponents.Helpers;

#line default
#line hidden
#nullable disable
    public partial class BaseBasicGenericCertComponent<TItem, ShowItem> : Components.BaseComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
#nullable restore
#line 5 "E:\SharedApps\GitHub\BlazorGenericComponents\Components\BaseBasicGenericCertComponent.razor"
 if (IsLoading)
{

#line default
#line hidden
#nullable disable
            __builder.OpenComponent<BlazorGenericComponents.Components.LoadingSpinner>(0);
            __builder.CloseComponent();
#nullable restore
#line 8 "E:\SharedApps\GitHub\BlazorGenericComponents\Components\BaseBasicGenericCertComponent.razor"
}
else
{
    

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\SharedApps\GitHub\BlazorGenericComponents\Components\BaseBasicGenericCertComponent.razor"
                                                                                                                                                                                                              


}

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
#nullable restore
#line 16 "E:\SharedApps\GitHub\BlazorGenericComponents\Components\BaseBasicGenericCertComponent.razor"
       


    protected IQueryable<ShowItem> Items { get; set; }
    protected IQueryable<ShowItem> FiltredItems { get; set; }
    protected List<Helpers.GridColumn<ShowItem>> Columns { get; set; } = new();
    protected List<TableAction<ShowItem>> TableActions { get; set; } = new();
    protected bool isModalVisible { get; set; } = false;
    protected string modalClass { get; set; } = "";
    protected string modalTitle { get; set; } = "Add";
    protected string modalButtonText { get; set; } = "Add";

    protected bool isEditMode { get; set; }
    protected bool IsLoading { get; set; } = true;
    protected bool showConfirmation { get; set; } = false;
    protected long itemToDeleteId { get; set; }
    protected string itemGuidToDeleteId { get; set; }


    protected bool IsRaduisEnabled { get; set; } = true;
    protected TItem CurrentObject { get; set; }
    //here quiery builder
    protected bool showQueryBuilder { get; set; } = false;
    private List<ShowItem> list { get; set; } = new List<ShowItem>();
    protected QueryHeaderCompo<ShowItem> QueryBuilder { get; set; } = new();

    protected void SetActionAuthorized()
    {
        if (!CanEdit)
        {
            if (TableActions != null && TableActions.Count > 0)
            {
                var ed = TableActions?.Where(a => a.Name.Contains("Edit"))?.FirstOrDefault();
                TableActions.Remove(ed);
            }
        }
        if (!CanDelete)
        {
            if (TableActions != null && TableActions.Count > 0)
            {
                var ed = TableActions?.Where(a => a.Name.Contains("Delete"))?.FirstOrDefault();
                TableActions.Remove(ed);
            }
        }
    }
    protected virtual void AfterLoading()
    {
        SetActionAuthorized();
    }
    //int seq = 0;
    protected RenderFragment GetQueryBuilderContent()
    {
        return GetParrentContent("QueryHeader");
    }
    protected RenderFragment GetListContent()
    {
        return GetParrentContent("List");
    }
    protected RenderFragment GetParrentContent(string component)
    {
        //var rout = routers?.Where(a => a.name == _activeTab)?.FirstOrDefault();
        //return

        return component switch
        {
            "Display Interface" => (builder) =>
            {
                //builder.OpenComponent(0, typeof(DisplayInterface));

                //// Pass the "Content" parameter to the DisplayInterface component
                //builder.AddAttribute(1, "Router", selectRouter);
                //builder.CloseComponent();
            }
            ,
            "List" => (builder) =>
            {
                builder.OpenComponent(1, typeof(GenericList<ShowItem, Helpers.GridColumn<ShowItem>>));

                // Pass the "Content" parameter to the DisplayInterface component
                builder.AddAttribute(1, "Items", list);
                builder.AddAttribute(2, "Actions", TableActions);
                builder.AddAttribute(3, "Columns", Columns);
                builder.CloseComponent();
            }
            ,
            "QueryHeader" => (builder) =>
            {
                builder.OpenComponent(1, typeof(QueryHeaderCompo<ShowItem>));
                //builder.AddAttribute(1, "QueryBuilder", queryBuilder);
                builder.AddAttribute(2, "OnClearFilter", EventCallback.Factory.Create<bool>(this, ClearFilters));
                builder.AddAttribute(3, "OnExecuteFilter", EventCallback.Factory.Create<bool>(this, ExecuteQuery));
                builder.CloseComponent();
            }
            ,
            _ => (builder) =>
            {
                //builder.OpenComponent(seq, typeof(ShowDetailsInterfaceAndActiveUsers));
                //// Pass the "Content" parameter to the DisplayInterface component
                //builder.AddAttribute(1, "Router", selectRouter);
                //builder.CloseComponent();
                //seq++;
            }
        };
    }

    protected virtual void OnLoading()
    {

    }

    protected virtual Task OnLoadingAsync()
    {
        return Task.CompletedTask;
    }
    protected async virtual Task RefreshListAsync()
    {
        await ExecuteQuery();
        //return Task.CompletedTask;
    }
    protected void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
    protected void NavigateToLoginPage()
    {

        // Get the full URL
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

        // Get the base URI (protocol + host)
        var baseUri = $"{uri.Scheme}://{uri.Host}";

        // Get the path (everything after the base URI)
        var path = uri.AbsolutePath.TrimStart('/');

        // Get the query string (if any)
        var queryString = uri.Query;

        var baseUrl = Navigation.BaseUri.TrimEnd('/');
        var curnurl = Navigation.Uri.TrimEnd('/');
        var returnurl = path;
        //if (string.IsNullOrEmpty(returnurl))
        //    returnurl = "";
        var lgiurl = $"{baseUrl}/Identity/Account/Login?returnUrl={returnurl}";
        Navigation.NavigateTo(lgiurl);
    }
    protected void NavigateToWithBaseUrl(string pageurl)
    {

        // Get the full URL
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

        // Get the base URI (protocol + host)
        var baseUri = $"{uri.Scheme}://{uri.Host}";

        // Get the path (everything after the base URI)
        var path = uri.AbsolutePath.TrimStart('/');

        // Get the query string (if any)
        var queryString = uri.Query;

        var baseUrl = Navigation.BaseUri.TrimEnd('/');
        var curnurl = Navigation.Uri.TrimEnd('/');
        var returnurl = path;
        //if (string.IsNullOrEmpty(returnurl))
        //    returnurl = "";
        if (pageurl.StartsWith("/"))
            pageurl = pageurl.TrimStart('/');
        var lgiurl = $"{baseUrl}/{pageurl}";
        Navigation.NavigateTo(lgiurl);
    }





   
    

    
   
  
   
    protected virtual void ShowConfirmation(int itemId)
    {
        itemToDeleteId = itemId;
        showConfirmation = true;
        StateHasChanged();
    }
    protected virtual void ShowConfirmation(ShowItem item)
    {
        
    }
    protected virtual void ShowConfirmation(long itemId)
    {
        itemToDeleteId = itemId;
        showConfirmation = true;
        StateHasChanged();
    }
    protected virtual void ShowConfirmation(string itemId)
    {
        itemGuidToDeleteId = itemId;
        showConfirmation = true;
        StateHasChanged();
    }

    
    protected virtual void ShowAddModal()
    {
        //CurrentObject = new TItem; // Reset for new item
        validationMessage = "";
        

        isModalVisible = true;
        modalClass = "show"; // Show the modal
    }
    protected virtual void ShowAddModal(TItem item)
    {
        validationMessage = "";
        //CurrentObject = new TItem; // Reset for new item
       

        isModalVisible = true;
        modalClass = "show"; // Show the modal
        StateHasChanged();
    }
    protected virtual void HideModal()
    {
        isModalVisible = false;
    }
    
    
    protected virtual void ShowEditModal(ShowItem obj)
    {
       
    }
   
    //for builder query
    protected virtual async Task ExecuteQuery()
    {
        try
        {
            IsLoading = true;
            //await SearchData();
            var queries = QueryBuilder.GetQueries();
            var filteredQuery = await Task.FromResult(QueryService.ApplyQueries(Items, queries));
            FiltredItems = filteredQuery;
            list = filteredQuery.ToList();
            //RefreshAfterExecuteQuery();
            StateHasChanged();
            IsLoading = false;
        }
        catch (Exception ex)
        {
            AddErrorLog(ex);
        }

    }
    // private IEnumerable<Na> FilteredItems => items?.OrderBy(p => ascending ? p.GetType().GetProperty(sortColumn)?.GetValue(p, null) : null)
    //    .ThenByDescending(p => !ascending ? p.GetType().GetProperty(sortColumn)?.GetValue(p, null) : null);


    protected virtual void ToggleQueryBuilder()
    {
        showQueryBuilder = !showQueryBuilder; // Toggle visibility
    }


    protected virtual async Task ClearFilters()
    {
        IsLoading = true;
        QueryBuilder.ClearQueries(); // Clear the queries in QueryBuilder
        list = await Task.FromResult(Items?.ToList()); //await SearchData();                             // await LoadItemsAsync(); // Refresh the item list to show all items
        FiltredItems = Items;
        //RefreshAfterExecuteQuery();
        StateHasChanged();
        IsLoading = false;
    }
    //end build query




#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.QueryService QueryService { get; set; }
    }
}
#pragma warning restore 1591

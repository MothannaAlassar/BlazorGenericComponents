// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorGenericComponents.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using BlazorGenericComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using BlazorGenericComponents.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\SharedApps\GitHub\BlazorGenericComponents\_Imports.razor"
using BlazorGenericComponents.Helpers;

#line default
#line hidden
#nullable disable
    public partial class GenericList<TItem, TColumn> : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 193 "E:\SharedApps\GitHub\BlazorGenericComponents\Components\GenericList.razor"
       

    [Parameter] public List<TItem> Items { get; set; } = new List<TItem>();
    [Parameter] public List<TableAction<TItem>> Actions { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;
    private List<TItem> pagedItems = new List<TItem>();
    private Dictionary<string, string> filterTexts = new Dictionary<string, string>();
    [Parameter] public List<Helpers.GridColumn<TItem>> Columns { get; set; } = new List<Helpers.GridColumn<TItem>>();
    private int totalItems;
    private int itemsPerPage = 10;
    private int currentPage = 1;
    private bool isLoading = true;
    private bool IsShowMenu = false;
    protected async override Task OnInitializedAsync()
    {
        itemsPerPage = PageSize;
        if (itemsPerPage <= 0)
            itemsPerPage = 10;
        foreach (var column in Columns)
        {
            filterTexts[column.Name] = string.Empty; // Default to empty
        }
        await LoadData();

        //return base.OnInitializedAsync();
    }
    protected override void OnParametersSet()
    {
        totalItems = Items?.Count ?? 0;
        UpdatePagedItems(currentPage);
        StateHasChanged();
        base.OnParametersSet();
    }
    //protected async override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    itemsPerPage = PageSize;
    //    if (itemsPerPage <= 0)
    //        itemsPerPage = 10;
    //    foreach (var column in Columns)
    //    {
    //        filterTexts[column.Name] = string.Empty; // Default to empty
    //    }
    //    await LoadData();
    //}
    private async Task LoadData()
    {
        // Simulate a delay for data fetching
        await Task.Delay(200);
        if (Items?.Count > 0)
        {
            totalItems = Items?.Count ?? 0;
            UpdatePagedItems(1);
        }
        isLoading = false;

        // Example of setting Items after fetching data

    }
    private void UpdatePagedItems(int page)
    {
        currentPage = page;
        pagedItems = Items?.AsEnumerable()?.Skip((page - 1) * itemsPerPage).Take(itemsPerPage).ToList();
    }

    private void OnPageChanged(int page)
    {
        UpdatePagedItems(page);
    }
    private IEnumerable<TItem> FilteredItems => FilterItems();
    //Items?
    //    //.Where(p => string.IsNullOrWhiteSpace(typeFilter) || p.Type.ToString().Contains(typeFilter))
    //    //.Where(p => string.IsNullOrWhiteSpace(routerFilter) || p.Routers.Contains(routerFilter, StringComparison.OrdinalIgnoreCase))
    //    //.Where(p => string.IsNullOrWhiteSpace(yearFilter) || p.YearId.ToString().Contains(yearFilter))
    //    //.Where(p => string.IsNullOrWhiteSpace(NumberFilter) || p.Numberofvouchers.ToString().Contains(NumberFilter))
    //    .OrderBy(p => ascending ? p.GetType().GetProperty(sortColumn)?.GetValue(p, null) : null)
    //    .ThenByDescending(p => !ascending ? p.GetType().GetProperty(sortColumn)?.GetValue(p, null) : null);
    private IEnumerable<TItem> FilterItems()
    {
        var filtered = Items?.AsEnumerable();
        if (Columns != null && Columns?.Where(a => a.IsFilterable == true)?.ToList()?.Count > 0)
            foreach (var column in Columns)
            {
                if (!string.IsNullOrWhiteSpace(filterTexts[column.Name]))
                {
                    filtered = filtered.Where(item => MatchesFilter(item, column.Name));
                }
            }

        return
             filtered?
            .OrderBy(p => ascending ? p.GetType().GetProperty(sortColumn)?.GetValue(p, null) : null)?
       .ThenByDescending(p => !ascending ? p.GetType().GetProperty(sortColumn)?.GetValue(p, null) : null)
       ?.Skip((currentPage - 1) * itemsPerPage)?.Take(itemsPerPage);

    }
    private string sortColumn = "id";
    private bool ascending = true;

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }
    }
    private dynamic selectedItem;
    private void ToggleMenu(TItem item)
    {
        if (selectedItem != null && item != selectedItem)
            if (IsShowMenu)
                IsShowMenu = !IsShowMenu;
        IsShowMenu = !IsShowMenu;
        selectedItem = item;
        StateHasChanged();
    }
    private bool MatchesFilter(TItem item, string columnName)
    {
        var value = GetPropertyValue(item, columnName)?.ToString();
        var filterText = filterTexts[columnName];

        return !string.IsNullOrEmpty(value) && value.IndexOf(filterText, StringComparison.OrdinalIgnoreCase) >= 0;
    }
    private object GetPropertyValue(TItem item, string propertyName)
    {
        return typeof(TItem).GetProperty(propertyName)?.GetValue(item);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager Navigation { get; set; }
    }
}
#pragma warning restore 1591

@using System.Threading

@code {
    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    // New parameter for autohide duration
    [Parameter]
    public int AutohideDuration { get; set; } = 5000; // Default to 5000ms (5 seconds)

    private Timer _timer;

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            StartAutohideTimer();
        }
    }

    private void StartAutohideTimer()
    {
        _timer?.Dispose();
        _timer = new Timer(HideToast, null, AutohideDuration, Timeout.Infinite);
    }

    private void HideToast(object state)
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(IsVisible);
        _timer?.Dispose();
    }

    private void CloseToast()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(IsVisible);
        _timer?.Dispose();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}

@if (IsVisible)
{
    <div role="alert" aria-live="assertive" aria-atomic="true" class="toast show" data-autohide="false">
        <div class="toast-header">
            <img src="..." class="rounded mr-2" alt="...">
            <strong class="mr-auto">@Title</strong>
            <small>@DateTime.Now.ToString("g")</small>
            <button type="button" class="ml-2 mb-1 close" @onclick="CloseToast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">
            @Message
        </div>
    </div>
}
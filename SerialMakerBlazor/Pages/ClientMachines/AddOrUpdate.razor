@page "/addeditclientmachine/{Id:int}"
@inherits Components.BaseBasicCertComponent<Models.ClientMachine, Models.ClientMachine>
@inject Repositories.IGenericRepo<Models.Client> clientService
<div class="container bg-light">
    <h3 class="text-md-center">@modalTitle</h3>
    <!-- Add/Edit Modal -->

    @if (IsLoading)
    {
        <LoadingSpinner />
    }
    else
    {

        <EditForm Model="CurrentObject" OnValidSubmit="SaveData" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />
            @*<ValidationSummary />*@
            <div class="mb-3">
                <div class="">
                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <p style="color: red;">@validationMessage</p>
                    }
                </div>
            </div>
            <div class="mb-2">
                <div class="row">
                    <div class="col-md">
                        
                            <label for="ClientId" class="">@Tralnslate?.GetTranslation("Client")</label>
                            <InputSelect id="ClientId" @bind-Value="CurrentObject.ClientId" class="form-select form-control">
                                <option value="">@Tralnslate?.GetTranslation("Select a Client")</option>
                                @foreach (var type in clients)
                                    {
                                    <option value="@type.ID">@type.Name</option>
                                    }
                            </InputSelect>
                            <ValidationMessage For="@(() => CurrentObject.ClientId)" />
                       
                    </div>
                    <div class="col-md">
                        <div class="input-group">
                            <label for="MachineName" class="">@Tralnslate?.GetTranslation("MachineName")</label>
                            <InputText type="text" id="MachineName" class="" @bind-Value="CurrentObject.MachineName" placeholder="@(@Tralnslate?.GetTranslation("Enter MachineName"))" />
                            <ValidationMessage For="@(() => CurrentObject.MachineName)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="mb-2">
                <div class="row">
                    <div class="col-md">
                        <div class="input-group">
                            <label for="MachineUser" class="">@Tralnslate?.GetTranslation("MachineUser")</label>
                            <InputText type="text" id="MachineUser" class="" @bind-Value="CurrentObject.MachineUser" placeholder="@(@Tralnslate?.GetTranslation("Enter MachineUser"))" />
                            <ValidationMessage For="@(() => CurrentObject.MachineUser)" />
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="input-group">
                            <label for="MachineHard" class="">@Tralnslate?.GetTranslation("MachineHard")</label>
                            <InputText type="text" id="MachineHard" class="" @bind-Value="CurrentObject.MachineHard" placeholder="@(@Tralnslate?.GetTranslation("Enter MachineHard"))" />
                            <ValidationMessage For="@(() => CurrentObject.MachineHard)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="mb-2">
                <div class="row">
                    <div class="col-md">
                        <div class="input-group">
                            <label for="MachineCpu" class="">@Tralnslate?.GetTranslation("MachineCpu")</label>
                            <InputText type="text" id="MachineCpu" class="" @bind-Value="CurrentObject.MachineCpu" placeholder="@(@Tralnslate?.GetTranslation("Enter MachineCpu"))" />
                            <ValidationMessage For="@(() => CurrentObject.MachineCpu)" />
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="input-group">
                            <label for="MachineSerial" class="">@Tralnslate?.GetTranslation("MachineSerial")</label>
                            <InputText type="text" id="MachineSerial" class="" @bind-Value="CurrentObject.MachineSerial" placeholder="@(@Tralnslate?.GetTranslation("Enter MachineSerial"))" />
                            <ValidationMessage For="@(() => CurrentObject.MachineSerial)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="mb-2">
                <div class="row">
                    <div class="col-md">
                        <div class="input-group">
                            <label for="OthersData" class="">@Tralnslate?.GetTranslation("OthersData")</label>
                            <InputText type="text" id="OthersData" class="" @bind-Value="CurrentObject.OthersData" placeholder="@(@Tralnslate?.GetTranslation("Enter OthersData"))" />
                            <ValidationMessage For="@(() => CurrentObject.OthersData)" />
                        </div>
                    </div>
                    <div class="col-md">
                        <div class="input-group">
                            <label for="Notes" class="">@Tralnslate?.GetTranslation("Notes")</label>
                            <InputText type="text" id="Notes" class="" @bind-Value="CurrentObject.Notes" placeholder="@(@Tralnslate?.GetTranslation("Enter Notes"))" />
                            <ValidationMessage For="@(() => CurrentObject.Notes)" />
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="input-group">
                <label for="Notes" class="">@Tralnslate?.GetTranslation("Notes")</label>
                <InputText type="text" id="Notes" class="" @bind-Value="CurrentObject.Notes" placeholder="@(@Tralnslate?.GetTranslation("Enter Notes"))" />
                <ValidationMessage For="@(() => CurrentObject.Notes)" />
            </div>*@

            <div class="operation-buttons">
                <button type="button" class="btn btn-secondary generate-button" @onclick="GoToBackPageAsync">@Tralnslate?.GetTranslation("Close")</button>
                <button type="submit" class="btn btn-primary generate-button">@modalButtonText</button>
            </div>
        </EditForm>

    }
</div>



@code {
    [Parameter] public int Id { get; set; }
    private List<Models.Client> clients = new();
    private List<Models.SystemType> systemTypes = new();
    private List<Models.SysVersion> sysVersions = new();
    private List<Models.Country> countries = new();
    private List<Models.Governorate> governorates = new();
    private List<Models.City> cities = new();
    private List<Data.Coding> licinceTypes = new();
    private List<Data.Coding> versionTypes = new();
    protected async override Task OnInitializedAsync()
    {
        try
        {
            if (Id > 0)
                CurrentObject = await CurrentService.GetByIdAsync(Id);
            if (CurrentObject == null)
            {
                CurrentObject = new Models.ClientMachine();
                AddingNew();
            }
            if (CurrentObject.ID > 0)
            {
                Editing(CurrentObject);
            }
            var c = await clientService.GetAllAsync();
            clients = c?.ToList();

            isModalVisible = true;
        }
        catch (Exception ex)
        {
            AddErrorLog(ex);
        }
        IsLoading = false;
    }
    protected override void AddingNew()
    {
        CurrentObject = new Models.ClientMachine();
        modalTitle = Tralnslate?.GetTranslation("Add Client Machine");
        modalButtonText = Tralnslate?.GetTranslation("Add");
    }
    protected override void Editing(Models.ClientMachine obj)
    {
        base.Editing(obj);
        CurrentObject = obj;
        modalTitle = Tralnslate?.GetTranslation("Edit Client Machine");
        modalButtonText = Tralnslate?.GetTranslation("Update");
    }
    private bool IsProcessing = false;
    private async Task SaveData()
    {
        try
        {
            IsLoading = true;
            var prvname = CurrentService.GetAll()?.Where(a => a.ClientId == CurrentObject.ClientId && a.ID != CurrentObject.ID)?.FirstOrDefault();
            if (prvname != null && prvname.ID > 0)
            {
                validationMessage = Tralnslate?.GetTranslation("this name of this record is already exist try another name ");
                return;
            }
            else
            {
                validationMessage = "";
            }
            if (CurrentObject.ID == 0)
            {
                CurrentObject.CreatedDate = GetSystemDate();
                CurrentObject.CreatedUser = await GetUserIdAsync();
                await CurrentService.AddAsync(CurrentObject);
            }
            else
            {
                CurrentObject.UpdatedDate = GetSystemDate();
                CurrentObject.UpdatedUser = await GetUserIdAsync();
                await CurrentService.UpdateAsync(CurrentObject.ID, CurrentObject);
            }
            isModalVisible = false; // Hide the modal
            IsLoading = true;
            //await Task.Delay(5000);
            await GoToBackPageAsync();
        }
        catch (Exception ex)
        {
            AddErrorLog(ex);
            validationMessage = ex?.Message;
        }
        IsProcessing = false;
        IsLoading = false;
    }
    private void HandleInvalidSubmit()
    {
        // This will trigger if the form validation fails.
        Console.WriteLine("Form submission is invalid.");
    }
}
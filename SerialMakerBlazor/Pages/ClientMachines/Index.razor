@page "/clientmachines"
@inherits Components.BaseBasicCertComponent<Models.ClientMachine, Models.Views.VClientMachine>
<h3>Index</h3>
<div class="row">
    <div class="mb-3">
        <div class="">
            @if (!string.IsNullOrEmpty(validationMessage))
            {
                <MessagesComponent Message="@validationMessage" MessageType="@base.MessageType" />
            }
        </div>
    </div>
</div>
@if (IsLoading)
{
    <LoadingSpinner />
}
else
{
    <button class="btn btn-primary" @onclick="@(()=> { NavigateToWithBaseUrl("addeditclientmachine/0"); })">@Tralnslate?.GetTranslation("Add New")</button>
    <CascadingValue Value="QueryBuilder">

        <QueryHeaderCompo TItem="Models.Views.VClientMachine" @ref="QueryBuilder" />

    </CascadingValue>

    <div class="table-responsive-md">
        @GetListContent()
    </div>


    <ConfirmationDialog IsVisible="showConfirmation" OnClose="@(async (confirmed) => { if (confirmed) await DeleteItem(); else CancelDelete(); })" />

}

@code {

    private async Task LoadingDataAsync()
    {
        Items = await CurrentShowService.GetAllAsync();

    }
    private void SetIntialData()
    {
        Columns = new List<GridColumn<Models.Views.VClientMachine>>();
        Columns.Add(new GridColumn<Models.Views.VClientMachine>
        {
            Title = Tralnslate?.GetTranslation("ID"),
            Name = nameof(Models.Views.VClientMachine.ID),
            PropertySelector = p => p.ID,

        });
        Columns.Add(
        new GridColumn<Models.Views.VClientMachine>
        {
            Title = Tralnslate?.GetTranslation("ClientName"),
            Name = nameof(Models.Views.VClientMachine.ClientName),
            PropertySelector = p => p.ClientName,
        });

        Columns.Add(new GridColumn<Models.Views.VClientMachine>
        {
            Title = Tralnslate?.GetTranslation("MachineName"),
            Name = nameof(Models.Views.VClientMachine.MachineName),
            PropertySelector = p => p.MachineName,
        });
        Columns.Add(new GridColumn<Models.Views.VClientMachine>
        {
            Title = Tralnslate?.GetTranslation("MachineUser"),
            Name = nameof(Models.Views.VClientMachine.MachineUser),
            PropertySelector = p => p.MachineUser,
        });
        Columns.Add(new GridColumn<Models.Views.VClientMachine>
        {
            Title = Tralnslate?.GetTranslation("MachineCpu"),
            Name = nameof(Models.Views.VClientMachine.MachineCpu),
            PropertySelector = p => p.MachineCpu,
        });
        Columns.Add(new GridColumn<Models.Views.VClientMachine>
        {
            Title = Tralnslate?.GetTranslation("MachineHard"),
            Name = nameof(Models.Views.VClientMachine.MachineHard),
            PropertySelector = p => p.MachineHard,
        });
        Columns.Add(new GridColumn<Models.Views.VClientMachine>
        {
            Title = Tralnslate?.GetTranslation("MachineSerial"),
            Name = nameof(Models.Views.VClientMachine.MachineSerial),
            PropertySelector = p => p.MachineSerial,
        });
        Columns.Add(new GridColumn<Models.Views.VClientMachine>
        {
            Title = Tralnslate?.GetTranslation("OthersData"),
            Name = nameof(Models.Views.VClientMachine.OthersData),
            PropertySelector = p => p.OthersData,
        });
        Columns.Add(new GridColumn<Models.Views.VClientMachine>
        {
            Title = Tralnslate?.GetTranslation("CreatedDate"),
            Name = nameof(Models.Views.VClientMachine.CreatedDate),
            PropertySelector = p => p.CreatedDate,
        });
        TableActions = new List<TableAction<Models.Views.VClientMachine>>
{

            new TableAction<Models.Views.VClientMachine>
            {
                Name = "Edit",
                Title = "Edit",
                Action = item => { NavigateToWithBaseUrl($"addeditclientmachine/{item.ID}"); /*ShowEditModal(item);*/ return Task.CompletedTask; }, // Call void function
                IsVisible = true // Set visibility based on your logic
            },
            new TableAction<Models.Views.VClientMachine>
            {
                Name = "Delete",
                Title = "Delete",
                Action = item =>{ShowConfirmation(item.ID); return Task.CompletedTask; },
                IsVisible = true // Change to false if you want to hide this action
            }

        };
    }
    protected async override Task OnInitializedAsync()
    {
        try
        {
            CurrentObject = new Models.ClientMachine();
            IsLoading = true;
            // await Task.Delay(5000);
            await LoadingDataAsync();
            SetIntialData();
            await ExecuteQuery();
        }
        catch (Exception ex)
        {

            AddErrorLog(ex);
        }
        IsLoading = false;
    }
    protected override void AddingNew()
    {
        CurrentObject = new Models.ClientMachine();
        modalTitle = Tralnslate?.GetTranslation("Add Machine");
        modalButtonText = Tralnslate?.GetTranslation("Add");
    }
    protected override void Editing(Models.Views.VClientMachine obj)
    {
        base.Editing(obj);
        var crnt = CurrentService.GetAll(a => a.ID == obj.ID)?.FirstOrDefault();
        CurrentObject = crnt;
        modalTitle = Tralnslate?.GetTranslation("Edit Machine");
        modalButtonText = Tralnslate?.GetTranslation("Update");
    }
    protected override async Task DeleteItemAsync(object id)
    {
        validationMessage = "";

        try
        {
            var ID = Convert.ToInt32(id);
            var rtv = await CurrentService.GetByIdAsync(ID);

            if (rtv != null)
            {
                await base.DeleteItemAsync(ID);
            }
            await LoadingDataAsync();
            await RefreshListAsync();
        }
        catch (Exception ex)
        {
            AddErrorLog(ex);
        }

        IsLoading = false;
    }
    private bool IsProcessing = false;
    private async Task SaveData()
    {
        try
        {

            //var prvname = CurrentService.GetAll()?.Where(a => a.Name.Trim() == CurrentObject.Name.Trim() && a.ID != CurrentObject.ID)?.FirstOrDefault();
            //if (prvname != null && prvname.ID > 0)
            //{
            //    validationMessage = Tralnslate?.GetTranslation("this name of this record is already exist try another name ");
            //    return;
            //}
            //else
            //{
            //    validationMessage = "";
            //}
            if (CurrentObject.ID == 0)
            {
                CurrentObject.CreatedDate = GetSystemDate();
                CurrentObject.CreatedUser = await GetUserIdAsync();
                await CurrentService.AddAsync(CurrentObject);
            }
            else
            {
                CurrentObject.UpdatedDate = GetSystemDate();
                CurrentObject.UpdatedUser = await GetUserIdAsync();
                await CurrentService.UpdateAsync(CurrentObject.ID, CurrentObject);
            }
            isModalVisible = false; // Hide the modal
            IsLoading = true;
            await LoadingDataAsync();
            await RefreshListAsync();
        }
        catch (Exception ex)
        {
            AddErrorLog(ex);
            validationMessage = ex?.Message;
        }
        IsProcessing = false;
        IsLoading = false;
    }

    private void HandleInvalidSubmit()
    {
        // This will trigger if the form validation fails.
        Console.WriteLine("Form submission is invalid.");
    }

}

// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SerialMakerBlazor.Pages.SystemTypes
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using SerialMakerBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using SerialMakerBlazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using SerialMakerBlazor.Helper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using BlazorGenericComponents.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\SharedApps\GitHub\SerialMakerBlazor\_Imports.razor"
using BlazorGenericComponents.Helpers;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/systypes")]
    public partial class Index : Components.BaseBasicCertComponent<Models.SystemType, Models.SystemType>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 76 "E:\SharedApps\GitHub\SerialMakerBlazor\Pages\SystemTypes\Index.razor"
       
    private async Task LoadingDataAsync()
    {
        Items = await CurrentShowService.GetAllAsync();

    }
    private void SetIntialData()
    {
        Columns = new List<GridColumn<Models.SystemType>>();
        Columns.Add(new GridColumn<Models.SystemType>
        {
            Title = Tralnslate?.GetTranslation("ID"),
            Name = nameof(Models.SystemType.ID),
            PropertySelector = p => p.ID,

        });
        Columns.Add(
        new GridColumn<Models.SystemType>
        {
            Title = Tralnslate?.GetTranslation("SysName"),
            Name = nameof(Models.SystemType.SysName),
            PropertySelector = p => p.SysName,
        });

        Columns.Add(new GridColumn<Models.SystemType>
        {
            Title = Tralnslate?.GetTranslation("CreatedDate"),
            Name = nameof(Models.SystemType.CreatedDate),
            PropertySelector = p => p.CreatedDate,
        });
        Columns.Add(new GridColumn<Models.SystemType>
        {
            Title = Tralnslate?.GetTranslation("Notes"),
            Name = nameof(Models.SystemType.Notes),
            PropertySelector = p => p.Notes,
        });
        TableActions = new List<TableAction<Models.SystemType>>
{

            new TableAction<Models.SystemType>
            {
                Name = "Edit",
                Title = "Edit",
                Action = item => { NavigateToWithBaseUrl($"addeditsystemtype/{item.ID}"); /*ShowEditModal(item);*/ return Task.CompletedTask; }, // Call void function
                IsVisible = true // Set visibility based on your logic
            },
            new TableAction<Models.SystemType>
            {
                Name = "Delete",
                Title = "Delete",
                Action = item =>{ShowConfirmation(item.ID); return Task.CompletedTask; },
                IsVisible = true // Change to false if you want to hide this action
            }

        };
    }
    protected async override Task OnInitializedAsync()
    {
        try
        {
            CurrentObject = new Models.SystemType();
            await LoadingDataAsync();
            SetIntialData();
            await ExecuteQuery();

        }
        catch (Exception ex)
        {

            AddErrorLog(ex);
        }
        IsLoading = false;
    }
    protected override void AddingNew()
    {
        CurrentObject = new Models.SystemType();
        modalTitle = Tralnslate?.GetTranslation("Add System");
        modalButtonText = Tralnslate?.GetTranslation("Add");
    }
    protected override void Editing(Models.SystemType obj)
    {
        base.Editing(obj);
        modalTitle = Tralnslate?.GetTranslation("Edit System");
        modalButtonText = Tralnslate?.GetTranslation("Update");
    }
    protected override async Task DeleteItemAsync(object id)
    {
        validationMessage = "";

        try
        {
            var ID = Convert.ToInt32(id);
            var rtv = await CurrentService.GetByIdAsync(ID);

            if (rtv != null)
            {
                await base.DeleteItemAsync(ID);
            }
            await LoadingDataAsync();
            await RefreshListAsync();
        }
        catch (Exception ex)
        {
            AddErrorLog(ex);
        }

        IsLoading = false;
    }
    private bool IsProcessing = false;
    private async Task SaveData()
    {
        try
        {

            var prvname = CurrentService.GetAll()?.Where(a => a.SysName.Trim() == CurrentObject.SysName.Trim() && a.ID != CurrentObject.ID)?.FirstOrDefault();
            if (prvname != null && prvname.ID > 0)
            {
                validationMessage = Tralnslate?.GetTranslation("this name of this record is already exist try another name ");
                return;
            }
            else
            {
                validationMessage = "";
            }
            if (CurrentObject.ID == 0)
            {
                CurrentObject.CreatedDate = GetSystemDate();
                CurrentObject.CreatedUser = await GetUserIdAsync();
                await CurrentService.AddAsync(CurrentObject);
            }
            else
            {
                CurrentObject.UpdatedDate = GetSystemDate();
                CurrentObject.UpdatedUser = await GetUserIdAsync();
                await CurrentService.UpdateAsync(CurrentObject.ID, CurrentObject);
            }
            isModalVisible = false; // Hide the modal
            IsLoading = true;
            await LoadingDataAsync();
            await RefreshListAsync();
        }
        catch (Exception ex)
        {
            AddErrorLog(ex);
            validationMessage = ex?.Message;
        }
        IsProcessing = false;
        IsLoading = false;
    }

    private void HandleInvalidSubmit()
    {
        // This will trigger if the form validation fails.
        Console.WriteLine("Form submission is invalid.");
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
